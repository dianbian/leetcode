class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
    int m = grid.size();
    int n = grid[0].size();
    vector<vector<int>> dp(m, vector<int>(n, 0));
    
    dp[0][0] = grid[0][0];
    
    // 初始化第一列
    for(int i = 1; i < m; ++i) {
        dp[i][0] = dp[i-1][0] + grid[i][0];
    }
    
    // 初始化第一行
    for(int j = 1; j < n; ++j) {
        dp[0][j] = dp[0][j-1] + grid[0][j];
    }
    
    // 填充DP表
    for(int i = 1; i < m; ++i) {
        for(int j = 1; j < n; ++j) {
            dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
        }
    }
    
    return dp[m-1][n-1];
}
};


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
    int m = grid.size();
    int n = grid[0].size();
    vector<int> dp(n, 0);
    
    dp[0] = grid[0][0];
    
    // 初始化第一行
    for(int j = 1; j < n; ++j) {
        dp[j] = dp[j-1] + grid[0][j];
    }
    
    // 逐行更新
    for(int i = 1; i < m; ++i) {
        dp[0] += grid[i][0];  // 更新每行第一个元素
        for(int j = 1; j < n; ++j) {
            dp[j] = grid[i][j] + min(dp[j], dp[j-1]);
        }
    }
    
    return dp[n-1];
}
};
