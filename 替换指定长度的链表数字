/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* p = head;
        ListNode* q = head;
        while (p) {
            bool flag = false;
            for (int i = 1; i < k; ++i) {
                p = p->next;
                if (p == nullptr) {
                    flag = true;
                    break;
                }
            }
            if (flag) {
                break;
            }
            int val = p->val;
            p->val = q->val;
            q->val = val;

            q = p->next;
            p = p->next;
        }
        return head;
    }
};



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (head == nullptr || k == 1) return head;

        ListNode* dummy = new ListNode(0);
        dummy->next = head;

        ListNode* pre = dummy;
        ListNode* curr = dummy;
        ListNode* nex = dummy;

        
        // 计算链表长度
        int length = 0;
        while (curr->next != nullptr) {
            length++;
            curr = curr->next;
        }
        
        // 逐组反转
        while (length >= k) {
            curr = pre->next;
            nex = curr->next;
            
            // 反转k-1次
            for (int i = 1; i < k; i++) {
                curr->next = nex->next;
                nex->next = pre->next;
                pre->next = nex;
                nex = curr->next;
            }
            
            pre = curr;
            length -= k;
        }
        return dummy->next;
    }
};
