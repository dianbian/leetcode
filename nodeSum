/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if (l1 == NULL) {
            return l2;
        }
        if (l2 == NULL) {
            return l1;
        }
        vector<int> nums;
        int tmp = 0;
        while (l1 != NULL && l2 != NULL) {
            int val = l1->val + l2->val + tmp;
            if (val >= 10) {
                tmp = 1;
            } else {
                tmp = 0;
            }
            nums.push_back(val % 10);
            l1 = l1->next;
            l2 = l2->next;
        }
        while(l1 != NULL) {
            int val = l1->val + tmp;
            if (val >= 10) {
                tmp = 1;
            } else {
                tmp = 0;
            }
            nums.push_back(val % 10);
            l1 = l1->next;
        }
        while(l2 != NULL) {
            int val = l2->val + tmp;
            if (val >= 10) {
                tmp = 1;
            } else {
                tmp = 0;
            }
            nums.push_back(val % 10);
            l2 = l2->next;
        }
        if (tmp == 1) {
            nums.push_back(1);
        }
        ListNode* head = NULL;
        ListNode* rear = NULL;
        for(size_t i = 0 ; i < nums.size(); ++i) {
            ListNode* node = new ListNode;
            node->val = nums[i];
            if (i == 0) {
                head = node;
            } else {
                rear->next = node;
            }
            rear = node;
        }
        return head;
    }
};
