class Solution {
public:
    string longestPalindrome(string s) {
        if (s.size() == 0 || s.size() == 1) {
            return s;
        }
        if (s.size() == 2 && s[0] != s[1]) {
            return s.substr(0, 1);
        }
        int sSize = s.size();
        vector<string> sets;
        for (int i = 1; i <= sSize; i++) {
            for (int j = 0; j < sSize; j++) {
                sets.push_back(s.substr(j, i));
            }
        }

        vector<string> vecs;
        for (auto e : sets) {
            if (e.size() % 2 == 0) {
                bool flag = true;
                for (int i = 0; i < e.size() / 2; ++i) {
                    if (e[i] != e[e.size() - 1 - i]) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    vecs.push_back(e);
                }
            } else {
                bool flag = true;
                for (int i = 0; i < (e.size() - 1) / 2; ++i) {
                    if (e[i] != e[e.size() - 1 - i]) {
                        flag = false;
                        break;
                    }
                }
                if (flag) {
                    vecs.push_back(e);
                }
            }
        }
        string max;;
        for (auto i = 0; i < vecs.size();  ++i) {
            if (vecs[i].size() > max.size()) {
                max = vecs[i];
            }
        }
        return max;
    }
};
