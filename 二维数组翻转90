class Solution {
public:
    // 方法1：转置+镜像翻转
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        
        // 转置矩阵
        for (int i = 0; i < n; ++i) {
            for (int j = i; j < n; ++j) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        
        // 水平翻转
        for (int i = 0; i < n; ++i) {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};

class Solution {
public:
    // 方法2：分层旋转
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int layer = 0; layer < n / 2; ++layer) {
            int first = layer;
            int last = n - 1 - layer;
            for (int i = first; i < last; ++i) {
                int offset = i - first;
                // 保存上边
                int top = matrix[first][i];
                // 左到上
                matrix[first][i] = matrix[last-offset][first];
                // 下到左
                matrix[last-offset][first] = matrix[last][last-offset];
                // 右到下
                matrix[last][last-offset] = matrix[i][last];
                // 上到右
                matrix[i][last] = top;
            }
        }
    }
};
