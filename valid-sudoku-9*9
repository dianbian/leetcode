class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        for (int i = 0; i < board.size(); i++) {
            set<char> setCh;
            for (int j = 0; j < board[i].size(); ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
                auto res = setCh.insert(board[i][j]);
                if (!res.second) {
                    cout << "mm" << endl;
                    return false;
                }
            }
            set<char> setCol;
            for (int j = 0; j < board[i].size(); ++j) {
                if ('.' == board[j][i]) {
                    continue;
                }
                auto res = setCol.insert(board[j][i]);
                if (!res.second) {
                    cout << "nn" << endl;
                    return false;
                }
            }
        }
        set<char> setCol1;
        set<char> setCol2;
        set<char> setCol3;
        for (int i = 0; i < 3; ++i) {
            for (int  j = 0; j < 3; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol1.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
            for (int  j = 3; j < 6; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol2.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
            for (int  j = 6; j < 9; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol3.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
        }
        setCol1.clear();
        setCol2.clear();
        setCol3.clear();
        for (int i = 3; i < 6; ++i) {
            for (int  j = 0; j < 3; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol1.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
            for (int  j = 3; j < 6; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol2.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
            for (int  j = 6; j < 9; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol3.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
        }
        setCol1.clear();
        setCol2.clear();
        setCol3.clear();
        for (int i = 6; i < 9; ++i) {
           for (int  j = 0; j < 3; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol1.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
            for (int  j = 3; j < 6; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol2.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
            for (int  j = 6; j < 9; ++j) {
                if ('.' == board[i][j]) {
                    continue;
                }
            
                auto res = setCol3.insert(board[i][j]);
                if (!res.second) {
                    cout << "xx" << endl;
                    return false;
                }
            }
        }
        return true;
    }
};
