class Solution {
public:
    double myPow(double x, int n) {
        if (std::fabs(x - 1.0) < std::numeric_limits<double>::epsilon() * 10) {
            return 1.0;
        }
        if (n == 0) {
            return 1;
        }
        if (n == INT_MIN) {
            n += 1;
        }
        int m = n > 0 ? n : -1 * n;
        double res = 1;
        for (int i = 0; i < m; ++i) {
            res *= x;
        }
        if (n > 0) {
            return res;
        }
        return 1 / res;
    }
};

class Solution {
public:
    // 迭代实现（推荐）
    double myPow(double x, int n) {
        long long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }
        
        double res = 1.0;
        while (N > 0) {
            if (N % 2 == 1) {
                res *= x;
            }
            x *= x;
            N /= 2;
        }
        return res;
    }
};
