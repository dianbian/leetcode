class Solution {
public:
    bool isNumber(string s) {
        int i = 0;
        int n = s.length();
        
        // 跳过前导空格
        while (i < n && s[i] == ' ') i++;
        
        // 处理符号
        if (i < n && (s[i] == '+' || s[i] == '-')) i++;
        
        bool hasDigit = false;
        bool hasDot = false;
        bool hasExp = false;
        
        // 处理数字部分
        while (i < n && (isdigit(s[i]) || s[i] == '.')) {
            if (s[i] == '.') {
                if (hasDot || hasExp) return false;
                hasDot = true;
            } else {
                hasDigit = true;
            }
            i++;
        }
        
        if (!hasDigit) return false; // 必须至少有一个数字
        
        // 处理指数部分
        if (i < n && (s[i] == 'e' || s[i] == 'E')) {
            hasExp = true;
            i++;
            
            // 指数符号后可以有符号
            if (i < n && (s[i] == '+' || s[i] == '-')) i++;
            
            bool expHasDigit = false;
            while (i < n && isdigit(s[i])) {
                expHasDigit = true;
                i++;
            }
            
            if (!expHasDigit) return false; // 指数后必须有数字
        }
        
        // 跳过尾部空格
        while (i < n && s[i] == ' ') i++;
        
        return i == n; // 必须处理完所有字符
    }
};
