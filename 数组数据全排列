class Solution {
public:
    void backtrace(vector<int>& nums, int start, vector<vector<int>>& tmp) {
        if (start == nums.size()) {
            tmp.push_back(nums);
            return;
        }
        
        for (int i = start; i < nums.size(); ++i) {
            swap(nums[start], nums[i]); // 选择当前元素
            backtrace(nums, start + 1, tmp);  // 递归处理剩余元素
            swap(nums[start], nums[i]);  // 回溯撤销选择
        }
    }


    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;

        backtrace(nums, 0, res);
        return res;
    }
};


class Solution {
public:

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        do {
            result.push_back(nums);
        } while (next_permutation(nums.begin(), nums.end()));
        return result;
    }
};
